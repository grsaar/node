1. Select random country
    1.1 get retailers
        1.1.1 get products

        //PG RELATIONAL

        SELECT "Country"."Id" AS "CountryId", "Retailer"."Id" AS "RetailerId", "Product"."Id", "Product"."RetailerId"
        FROM "Country" LEFT JOIN "Retailer" ON "Country"."Id" = "Retailer"."CountryId"
        LEFT JOIN "Product" ON "Product"."RetailerId" = "Retailer"."Id"
        WHERE "Country"."Id" = 19; 
       // AND "Product"."RetailerId" = "Retailer"."Id";

        //MONGO RELATIONAL
        
        db.Country.aggregate([
            {
             $match: {$and: [{"name": "Libya"}]}
         }, {
             $lookup: {
                 from: "Retailer",
                 localField: "_id",
                 foreignField: "_countryId",
                 as: "retailers"
             }
         },{
             $unwind : "$retailers"
        },{
             $lookup: {
                 from: "Product",
                 localField: "retailers._id",
                 foreignField: "_retailerId",
                 as: "products"
             }
         }, {
             $project:{
                 _id: 1,
                 name: 1,
                 products: "$products.name"
            }
         }
         ])

         //PG DOCUMENTS

        SELECT * FROM "Product" 
        WHERE  "Data" -> 'Name' = "ksHownzhCxbI";

        //MONGO DOCUMENTS

        db.Product.find({"retailer.counrty.name": "Denmark"})



2. Select random classification item
    2.1 get all it's children (with hierarchyCode)

        //PG RELATIONAL

        SELECT * FROM "Classification Item"
        WHERE "Classification Item"."HierarchyCode" LIKE '243,861,%';

        //MONGO RELATIONAL
        db.ClassificationItem.find({"hierarchyCode": /243,861,/i})


        2.1.1 get products using hierarchy code

        //PG RELATIONAL

        SELECT "Product".*, "Classification Item"."HierarchyCode", "Classification Item"."Id" FROM "Classification Item" INNER JOIN ("Product Classification Item" 
        INNER JOIN "Product" on "Product"."Id" = "Product Classification Item"."ProductId") 
        ON "Product Classification Item"."ClassificationItemId" = "Classification Item"."Id"
         WHERE "Classification Item"."HierarchyCode" LIKE '243,861,%';

        //MONGO RELATIONAL

    // Tulemuseks array classificationItemitest, milles omakorda on array toodetest
         db.ClassificationItem.aggregate([
         {
            $match:{"hierarchyCode": /243,/i}
        },{
            $lookup: {
                from: "ProductClassificationItem",
                localField: "_id",
                foreignField: "_classificationItemId",
                as: "productClassificationItems"
            }
        },{
            $match: {
                "productClassificationItems": {$ne: []} //vist pole vaja, " default behavior for $unwind is to omit documents where the referenced field is missing or an empty array"
            }
        },{
             $unwind : "$productClassificationItems"
        },{
            $lookup: {
                from: "Product",
                localField: "productClassificationItems._productId",
                foreignField: "_id",
                as: "productClassificationItems.products"
            }
        },{
            $project:{
                _id: 1,
                name: 1,
                products: "$productClassificationItems.products.name"
            }
        }
        ])

        //PG DOCUMENTS

        //MONGO DOCUMENTS

        db.Product.find({"classificationItems.hierarchyCode": /1,/i}, {"classificationItems":1}) //no
         db.Product.find({"classificationItems": {$elemMatch: {"hierarchyCode": /1,/i}}}, {"classificationItems":1}) //no


        2.1.2 get products using ids??


3. Update product classification item

UPDATE "Product Classification Item"
SET "ClassificationItemId" = 10
WHERE "Product"."Id" = 

db.ProductClassificationItem.update({"_productId" : ..., {$set:{"_classificationItemId" : ...}}})

4. Add products with no classification item


5. Get unclassified products

SELECT * FROM "Product"
LEFT JOIN "Product Classification Item" ON "Product"."Id" = "Product Classification Item"."ProductId"
WHERE "Product Classification Item"."ProductId" IS NULL; 


db.Product.aggregate([{
            $lookup: {
                from: "ProductClassificationItem",
                localField: "_id",
                foreignField: "_productId",
                as: "productClassificationItems"
            }
        },{
            $unwind: {
                path: "$productClassificationItems",
                preserveNullAndEmptyArrays: true
            }
        },{
            $match: {
                "productClassificationItems._productId": {$exists: false} //no
            }
        },{
            $project:{
                _id: 1,
                name: 1
            }
        }
        ])


6. Get products with no thumbnails??

SELECT * FROM "Product" 
WHERE "Product"."ThumbnailId" IS NULL;

db.Product.find({"_thumbnailId": {$exists: false}})

    6.1 Add thumbnails

    INSERT INTO "Thumbnail"("Name", "Data") VALUES($1,$2) returning "Id";

    db.Thumbnail.insertOne({name: ..., data: ...})

        6.1.2 Update product ThumbnailId 

7. Delete retailers with no products

DELETE FROM "Retailer"
WHERE "Id" IN(
SELECT DISTINCT "Retailer"."Id" FROM "Retailer"
LEFT JOIN "Product" ON "Retailer"."Id" = "Product"."RetailerId"
WHERE "Product"."RetailerId" IS NULL);

db.Retailer.aggregate([{
            $lookup: {
                from: "Product",
                localField: "_id",
                foreignField: "_retailerId",
                as: "products"
            }
        },{
            $unwind: {
                path: "$products",
                preserveNullAndEmptyArrays: true
            }
        },{
            $match: {
                "products._retailerId": {$exists: false} //no
            }
        },{
            $project:{
                _id: 1,
                name: 1
            }
        }
        ])

db.Product.remove( { _id: { $eq: ... } } )

